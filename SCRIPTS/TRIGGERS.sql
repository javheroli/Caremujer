--TRIGGERS ASOCIADOS A REGLAS DE NEGOCIO
--RN0
CREATE OR REPLACE TRIGGER TR_MAXNUMCITAS
BEFORE INSERT OR UPDATE OF USUARIO_MEDICO,FECHA ON CITAS
FOR EACH ROW
DECLARE
PRAGMA AUTONOMOUS_TRANSACTION;
V_FECHA DATE := :NEW.FECHA;
V_USUARIO VARCHAR2(40) := :NEW.USUARIO_MEDICO;
V_CUENTA NUMBER;
V_MAX NUMBER;
BEGIN
  SELECT COUNT(*)INTO V_CUENTA FROM CITAS WHERE USUARIO_MEDICO = V_USUARIO AND FECHA=V_FECHA;
  SELECT MAXNUMCITAS INTO V_MAX FROM MEDICOS WHERE USUARIO_MEDICO = V_USUARIO;
  IF V_CUENTA >= V_MAX THEN
    RAISE_APPLICATION_ERROR(-20001,'Un médico no puede tener más citas un mismo día que su número máximo de citas permitido');
  END IF;
END;
/

--RN1
CREATE OR REPLACE TRIGGER TR_CITAS_CADA_20M
BEFORE INSERT OR UPDATE OF HORA ON CITAS
REFERENCING NEW AS N
FOR EACH ROW
DECLARE
  V_HORA TIMESTAMP := TO_TIMESTAMP(:N.HORA,'HH24:MI');
BEGIN
   IF EXTRACT(MINUTE FROM (V_HORA)) NOT IN (0,20,40) THEN
      RAISE_APPLICATION_ERROR (-20002, 'Las citas tienen que ser a en punto, y veinte o menos veinte');
   END IF;
END;
/


--RN2
CREATE OR REPLACE TRIGGER TR_HORARIO_CLINICA
BEFORE INSERT OR UPDATE OF HORA ON CITAS
FOR EACH ROW
DECLARE
  V_HORA TIMESTAMP := TO_TIMESTAMP(:NEW.HORA,'HH24:MI');
BEGIN
  IF EXTRACT(HOUR FROM (V_HORA)) NOT IN(9,10,11,12,13,16,17,18,19) THEN
    RAISE_APPLICATION_ERROR (-20003, 'Las citas tienen respetar el horario de la clínica 9:00 a 13:00 y de 16:00 a 19:00');
  END IF;
END;
/

--RN3
CREATE OR REPLACE TRIGGER TR_CITA_IDENTICA
BEFORE INSERT OR UPDATE OF USUARIO_MEDICO,FECHA,HORA ON CITAS
FOR EACH ROW
DECLARE
  PRAGMA AUTONOMOUS_TRANSACTION;
  V_MEDICO VARCHAR(40) := :NEW.USUARIO_MEDICO;
  V_FECHA DATE := :NEW.FECHA;
  V_HORA VARCHAR2(20) := :NEW.HORA;
  V_CUENTA NUMBER;
BEGIN
  SELECT COUNT(*) INTO V_CUENTA FROM CITAS WHERE USUARIO_MEDICO = V_MEDICO AND FECHA = V_FECHA AND HORA = V_HORA;
  IF V_CUENTA > 0 THEN
    RAISE_APPLICATION_ERROR(-20004,'No puede haber más de una cita de un mismo médico para una fecha y una hora específica');
  END IF;
END;
/

--RN4
CREATE OR REPLACE TRIGGER TR_EMAIL_TRABAJADORES
AFTER INSERT OR UPDATE OF EMAIL ON TRABAJADORES
FOR EACH ROW
DECLARE
  V_EMAIL VARCHAR2(40) := :NEW.EMAIL;
BEGIN
  IF V_EMAIL NOT LIKE '%@caremujer.es' THEN
    RAISE_APPLICATION_ERROR(-20005, 'Un trabajador debe tener un email acabado en @caremujer.es.');
   END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_EMAIL_MEDICOS
AFTER INSERT OR UPDATE OF EMAIL ON MEDICOS
FOR EACH ROW
DECLARE
  V_EMAIL VARCHAR2(40) := :NEW.EMAIL;
BEGIN
  IF V_EMAIL NOT LIKE '%@caremujer.es' THEN
    RAISE_APPLICATION_ERROR(-20006, 'Un médico debe tener un email acabado en @caremujer.es.');
   END IF;
END;
/

CREATE OR REPLACE TRIGGER TR_EMAIL_RECEPCIONISTA
AFTER INSERT OR UPDATE OF EMAIL ON RECEPCIONISTAS
FOR EACH ROW
DECLARE
  V_EMAIL VARCHAR2(40) := :NEW.EMAIL;
BEGIN
  IF V_EMAIL NOT LIKE '%@caremujer.es' THEN
    RAISE_APPLICATION_ERROR(-20007, 'Un recepcionista debe tener un email acabado en @caremujer.es.');
   END IF;
END;
/

--RN5
CREATE OR REPLACE TRIGGER TR_CITAS_ENTRE_SEMANA
BEFORE INSERT OR UPDATE OF FECHA ON CITAS
FOR EACH ROW 
DECLARE
V_FECHA DATE := :NEW.FECHA;
V_DIA VARCHAR2(20);
BEGIN
  SELECT TO_CHAR(V_FECHA, 'D') INTO V_DIA FROM DUAL;
  IF V_DIA IN (6,7) THEN
  RAISE_APPLICATION_ERROR(-20008, 'Los días de la semana donde se pueden pedir citas deben ser entre lunes y viernes');
  END IF;
END;
/